// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using Evergine.Mathematics;
using static BulletSharp.EvergineUnsafeNativeMethods;


namespace BulletSharp
{
    public partial class CollisionWorld : IDisposable
    {
        private readonly IntPtr collisionsBuffer = btCollisionWorld_CreateBuffer();
        private readonly IntPtr manifoldBuffer = btCollisionWorld_CreateManifoldBuffer();
        private readonly IntPtr raycastBuffer = btCollisionWorld_CreateRayDataBuffer();

        public int ContactTest(CollisionObject collisionObject, out IntPtr buffer)
        {
            return ContactTest(collisionObject, -1, out buffer);
        }

        public int ContactTest(CollisionObject collisionObject, int shapeIndex, out IntPtr buffer)
        {
            buffer = default;
            return btCollisionWorld_ContactTest(Native, collisionObject.Native, shapeIndex, collisionsBuffer, ref buffer);
        }

        public bool ContactPairTest(CollisionObject collisionObjectA, CollisionObject collisionObjectB, int shapeIndexA = -1, int shapeIndexB = -1)
        {
            IntPtr buffer = default;
            return btCollisionWorld_ContactPairTest(Native, collisionObjectA.Native, collisionObjectB.Native, shapeIndexA, shapeIndexB, IntPtr.Zero, ref buffer) > 0;
        }

        public int ContactPairTest(CollisionObject collisionObjectA, CollisionObject collisionObjectB, int shapeIndexA, int shapeIndexB, out IntPtr buffer)
        {
            buffer = default;
            return btCollisionWorld_ContactPairTest(Native, collisionObjectA.Native, collisionObjectB.Native, shapeIndexA, shapeIndexB, collisionsBuffer, ref buffer);
        }

        public void GetManifolds(out IntPtr buffer, out int size)
        {
            buffer = default;
            size = btCollisionWorld_GetManifolds(Native, manifoldBuffer, ref buffer);
        }

        public void GetManifoldContact(int manifoldId, int contactId, IntPtr contactPtr)
        {
            btCollisionWorld_GetManifoldContact(Native, manifoldId, contactId, contactPtr);
        }

        public int GetManifoldContacts(int manifoldId, IntPtr contactBuffer, int contactBufferSize)
        {
            return btCollisionWorld_GetManifoldContacts(Native, manifoldId, contactBuffer, contactBufferSize);
        }

        public void RayTest(ref Vector3 rayFromWorld, ref Vector3 rayToWorld, int filterMask, out IntPtr buffer, out int size)
        {
            buffer = default;
            size = btCollisionWorld_RayTest(Native, ref rayFromWorld, ref rayToWorld, filterMask, raycastBuffer, ref buffer);
        }

        public void RayTestAll(ref Vector3 rayFromWorld, ref Vector3 rayToWorld, int filterMask, out IntPtr buffer, out int size)
        {
            buffer = default;
            size = btCollisionWorld_RayTestAll(Native, ref rayFromWorld, ref rayToWorld, filterMask, raycastBuffer, ref buffer);
        }

        public void SweepTest(ConvexShape castShape, CollisionObject castOwner, ref Matrix4x4 rayFromWorld, ref Matrix4x4 rayToWorld, int filterMask, out IntPtr buffer, out int size)
        {
            IntPtr castShapeNative = castShape.Native;
            IntPtr castOwnerNative = castOwner?.Native ?? IntPtr.Zero;

            buffer = default;
            size = btCollisionWorld_SweepTest(Native, castShapeNative, castOwnerNative, ref rayFromWorld, ref rayToWorld, filterMask, raycastBuffer, ref buffer);
        }

        public void SweepTestAll(ConvexShape castShape, CollisionObject castOwner, ref Matrix4x4 rayFromWorld, ref Matrix4x4 rayToWorld, int filterMask, out IntPtr buffer, out int size)
        {
            IntPtr castShapeNative = castShape.Native;
            IntPtr castOwnerNative = castOwner?.Native ?? IntPtr.Zero;

            buffer = default;
            size = btCollisionWorld_SweepTestAll(Native, castShapeNative, castOwnerNative, ref rayFromWorld, ref rayToWorld, filterMask, raycastBuffer, ref buffer);
        }

    }
}
